plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
    id 'kotlinx-serialization'
    id 'kotlin-parcelize'

    // Step 2: Next, in your Module Gradle file, apply the JUnit 5 plugin.
    id 'de.mannodermaus.android-junit5'
    id 'kover'
}

// Once the plugin is enabled, you can add JUnit 5 configuration options. Here, I set the test
// lifecycle to 'per_class'. By default, Junit 5 creates a new test class instance for each of your
// functions. This means that if you have 5 test cases inside a class, 5 instances are created in
// memory. By setting the lifecycle to per_class, only one test instance is created, and all of your
// test case functions run inside it with the same memory id. You can also annotate your classes
// on a class-by-class basis, but here, I'm enabling the lifecycle options globally.
junitPlatform {
    configurationParameter("junit.jupiter.testinstance.lifecycle.default", "per_class")
}

def appPropertiesFile = rootProject.file("app.properties")
def appProperties = new Properties()
appProperties.load(new FileInputStream(appPropertiesFile))

android {
    namespace 'com.example.cityapiclient'
    compileSdk 33

    defaultConfig {

        buildConfigField("String", "WEB_CLIENT_ID", appProperties['WEB_CLIENT_ID'])
        buildConfigField("String", "KTOR_IP_ADDR", appProperties['KTOR_IP_ADDR'])

        applicationId "com.example.cityapiclient"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        // add the AndroidJUnitRunner, then connect JUnit 5 to the runner
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"

        vectorDrawables {
            useSupportLibrary true
        }

    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            aaptOptions {
                ignoreAssetsPattern '!*.ttf'
            }
        }

    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8

    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/licenses/**']
        }
        resources {
            excludes += ['META-INF/licenses/**', 'META-INF/AL2.0', 'META-INF/LGPL2.1', 'font']
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
        packagingOptions {
            jniLibs {
                // https://github.com/mockk/mockk/issues/297#issuecomment-901924678
                useLegacyPackaging = true
            }
        }
    }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.compose.material3:material3:1.1.0-alpha03'
    implementation "androidx.navigation:navigation-compose:2.5.3"
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"

    //serialization/reflection
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.22"

    // window layout
    implementation "androidx.window:window:1.1.0-alpha04"
    implementation "androidx.compose.material3:material3-window-size-class:1.1.0-alpha03"

    // hilt
    implementation 'com.google.dagger:hilt-android:2.44'
    kapt 'com.google.dagger:hilt-compiler:2.43.2'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'

    // datastore
    //implementation "androidx.datastore:datastore-preferences-core:1.0.0"
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    implementation "androidx.lifecycle:lifecycle-runtime-compose:2.6.0-alpha03"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    // ViewModel utilities for Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.5.1"
    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.5.1"

    // ktor
    implementation "io.ktor:ktor-client-core:2.2.1"
    implementation "io.ktor:ktor-client-android:2.2.1"
    implementation "io.ktor:ktor-client-content-negotiation:2.2.1"
    implementation "io.ktor:ktor-serialization-kotlinx-json:2.2.1"
    implementation "io.ktor:ktor-client-logging:2.2.1"

    // add this to get rid of: SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder"
    // https://logback.qos.ch/manual/configuration.html
    implementation "ch.qos.logback:logback-classic:1.2.11"

    // google sign in
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.4"
    implementation 'com.google.android.gms:play-services-auth:20.4.0'

    // ******* UNIT TESTING ******************************************************
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"

    // Next, add support for launching coroutines in our tests...
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    testImplementation "io.ktor:ktor-client-mock:2.2.1"
    testImplementation "io.mockk:mockk:1.13.3"

    // ******* ANDROID TESTING ***************************************************
    // Jupiter API & Test Runner
    androidTestImplementation "androidx.test:runner:1.5.1"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"

    // The instrumentation test companion libraries
    androidTestImplementation "de.mannodermaus.junit5:android-test-core:1.3.0"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-test-runner:1.3.0"

    androidTestImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4'
    androidTestImplementation "io.mockk:mockk-android:1.13.3"

    androidTestImplementation 'app.cash.turbine:turbine:0.12.1'

    testImplementation project(path: ':sharedTest')
    androidTestImplementation project(path: ':sharedTest')

    // Compose testing dependencies
    androidTestImplementation "androidx.compose.ui:ui-test"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.4.0-alpha03"
    debugImplementation "androidx.compose.ui:ui-test-manifest"

    androidTestImplementation 'de.mannodermaus.junit5:android-test-compose:0.1.0-SNAPSHOT'

    // Hilt - not using at the moment
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.44'
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.44'

    // *****************************************************

}